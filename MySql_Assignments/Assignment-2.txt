Assignment - 2

create table salesman (salesman_id int primary key,name varchar(100) not null,
city varchar(100) not null,commission_percentage int not null);

INSERT into salesman VALUES (5001,"James Hoog","New York",15);
INSERT into salesman VALUES (5002,"Nail Knite","Paris" ,13);
INSERT into salesman VALUES (5005,"Pit Alex","London",11);
INSERT into salesman VALUES (5006,"Mc Lyon","Paris",14);
INSERT into salesman VALUES (5003,"Lauson Hen","Paris",12);
INSERT into salesman VALUES (5007,"Paul Adam","Rome",13);

mysql> select * from salesman;
+-------------+---------------+----------+-----------------------+
| salesman_id | name          | city     | commission_percentage |
+-------------+---------------+----------+-----------------------+
|        5001 | James Hoog    | New York |                    15 |
|        5002 | Nail Knite    | Paris    |                    13 |
|        5003 | Lauson Hen    | Paris    |                    12 |
|        5005 | Pit Alex      | London   |                    11 |
|        5006 | Mc Lyon       | Paris    |                    14 |
|        5007 | Paul Adam     | Rome     |                    13 |
|        5008 | Chandler Bing | New York |                    10 |
+-------------+---------------+----------+-----------------------+
7 rows in set (0.00 sec)

CREATE table customer (customer_id int primary key, cust_name varchar(100) not null,
city varchar(100) not null, grade int not null, salesman_id int);

INSERT into customer VALUES(3002,'Nick Rimando','New York  ',100,5001);
INSERT into customer VALUES(3005,'Graham Zusi ','California',200,5002);
INSERT into customer VALUES(3001,'Brad Guzan  ','London    ',200,5005);
INSERT into customer VALUES(3004,'Fabian Johns','Paris     ',300,5006);
INSERT into customer VALUES(3007,'Brad Davis  ','New York  ',200,5001);
INSERT into customer VALUES(3009,'Geoff Camero','Berlin    ',100,5003);
INSERT into customer VALUES(3008,'Julian Green','London    ',300,5002);
INSERT into customer VALUES(3003,'Jozy Altidor','Moscow    ',200,5007);

mysql> select * from customer;
+-------------+----------------+------------+-------+-------------+
| customer_id | cust_name      | city       | grade | salesman_id |
+-------------+----------------+------------+-------+-------------+
|        3001 | Brad Guzan     | London     |   200 |        5005 |
|        3002 | Nick Rimando   | New York   |   100 |        5001 |
|        3003 | Jozy Altidor   | Moscow     |   200 |        5007 |
|        3004 | Fabian Johns   | Paris      |   300 |        5006 |
|        3005 | Graham Zusi    | California |   200 |        5002 |
|        3007 | Brad Davis     | New York   |   200 |        5001 |
|        3008 | Julian Green   | London     |   300 |        5002 |
|        3009 | Geoff Camero   | Berlin     |   100 |        5003 |
|        3010 | Joey Tribbiani | New York   |   200 |        NULL |
+-------------+----------------+------------+-------+-------------+

CREATE table orders (
  ord_no int primary key,
  purchase_key int not null,
  ord_date date not null,
  customer_id int not null,
  salesman_id int,
  FOREIGN KEY (customer_id) REFERENCES customer (customer_id),
  FOREIGN KEY (salesman_id) REFERENCES salesman (salesman_id)
);

INSERT into orders VALUES(70001,150,'2012-10-05',3005,5002);
INSERT into orders VALUES(70009,270,'2012-09-10',3001,5005);
INSERT into orders VALUES(70002,65,'2012-10-05',3002,5001);
INSERT into orders VALUES(70004,110,'2012-08-17',3009,5003);
INSERT into orders VALUES(70007,948,'2012-09-10',3005,5002);
INSERT into orders VALUES(70005,2400,'2012-07-27',3007,5001);
INSERT into orders VALUES(70008,5760,'2012-09-10',3002,5001);
INSERT into orders VALUES(70010,1983,'2012-10-10',3004,5006);
INSERT into orders VALUES(70003,2480,'2012-10-10',3009,5003);
INSERT into orders VALUES(70012,250,'2012-06-27',3008,5002);
INSERT into orders VALUES(70011,75,'2012-08-17',3003,5007);
INSERT into orders VALUES(70013,3045,'2012-04-25',3002,5001);

mysql> select * from orders;
+--------+--------------+------------+-------------+-------------+
| ord_no | purchase_amt | ord_date   | customer_id | salesman_id |
+--------+--------------+------------+-------------+-------------+
|  70001 |          150 | 2012-10-05 |        3005 |        5002 |
|  70002 |           65 | 2012-10-05 |        3002 |        5001 |
|  70003 |         2480 | 2012-10-10 |        3009 |        5003 |
|  70004 |          110 | 2012-08-17 |        3009 |        5003 |
|  70005 |         2400 | 2012-07-27 |        3007 |        5001 |
|  70007 |          948 | 2012-09-10 |        3005 |        5002 |
|  70008 |         5760 | 2012-09-10 |        3002 |        5001 |
|  70009 |          270 | 2012-09-10 |        3001 |        5005 |
|  70010 |         1983 | 2012-10-10 |        3004 |        5006 |
|  70011 |           75 | 2012-08-17 |        3003 |        5007 |
|  70012 |          250 | 2012-06-27 |        3008 |        5002 |
|  70013 |         3045 | 2012-04-25 |        3002 |        5001 |
|  70014 |          529 | 2012-01-15 |        3010 |        NULL |
+--------+--------------+------------+-------------+-------------+
13 rows in set (0.00 sec)

-----------------------------------------Query-----------------------------------

1)  write a SQL query to find the salesperson and customer who reside in the same city.Return Salesman, cust_name and city

mysql> select salesman.name as Salesman, customer.cust_name as Customer, customer.city as City from customer inner join salesman on customer.city=salesman.city;
+---------------+----------------+----------+
| Salesman      | Customer       | City     |
+---------------+----------------+----------+
| Pit Alex      | Brad Guzan     | London   |
| Chandler Bing | Nick Rimando   | New York |
| James Hoog    | Nick Rimando   | New York |
| Mc Lyon       | Fabian Johns   | Paris    |
| Lauson Hen    | Fabian Johns   | Paris    |
| Nail Knite    | Fabian Johns   | Paris    |
| Chandler Bing | Brad Davis     | New York |
| James Hoog    | Brad Davis     | New York |
| Pit Alex      | Julian Green   | London   |
| Chandler Bing | Joey Tribbiani | New York |
| James Hoog    | Joey Tribbiani | New York |
+---------------+----------------+----------+

2)write a SQL query to find those orders where the order amount exists between 500 and 2000. Return ord_no, purch_amt, cust_name, city

mysql> select orders.ord_no as Order_No, orders.purch_amt as Purchase_Amount, customer.customer_name as Customer , customer.city as City from customer right join orders on orders.customer_id=customer.customer_id where orders.purch_amt >=500 and orders.purch_amt<=2000;
+----------+-----------------+----------------+------------+
| Order_No | Purchase_Amount | Customer       | City       |
+----------+-----------------+----------------+------------+
|    70007 |             948 | Graham Zusi    | California |
|    70010 |            1983 | Fabian Johns   | Paris      |
|    70014 |             529 | Joey Tribbiani | New York   |
+----------+-----------------+----------------+------------+

3. write a SQL query to find the salesperson(s) and the customer(s) he represents.Return Customer Name, city, Salesman, commission

mysql> select customer.cust_name as Customer,customer.city as City, salesman.name as Salesman, salesman.commission_percentage as Commision from customer inner join salesman on customer.salesman_id=salesman.salesman_id;
+--------------+------------+------------+-----------+
| Customer     | City       | Salesman   | Commision |
+--------------+------------+------------+-----------+
| Nick Rimando | New York   | James Hoog |        15 |
| Brad Davis   | New York   | James Hoog |        15 |
| Graham Zusi  | California | Nail Knite |        13 |
| Julian Green | London     | Nail Knite |        13 |
| Geoff Camero | Berlin     | Lauson Hen |        12 |
| Brad Guzan   | London     | Pit Alex   |        11 |
| Fabian Johns | Paris      | Mc Lyon    |        14 |
| Jozy Altidor | Moscow     | Paul Adam  |        13 |
+--------------+------------+------------+-----------+
8 rows in set (0.00 sec)

4. write a SQL query to find salespeople who received commissions of more than 12 percent from the company. Return Customer Name, customer city, Salesman, commission.

mysql> select customer.cust_name as Customer,customer.city as City, salesman.name as Salesman, salesman.commission_percentage as Commision from customer right join salesman on customer.salesman_id=salesman.salesman_id where salesman.commission_percentage>12 order by salesman.commission_percentage desc;
+--------------+------------+------------+-----------+
| Customer     | City       | Salesman   | Commision |
+--------------+------------+------------+-----------+
| Nick Rimando | New York   | James Hoog |        15 |
| Brad Davis   | New York   | James Hoog |        15 |
| Fabian Johns | Paris      | Mc Lyon    |        14 |
| Graham Zusi  | California | Nail Knite |        13 |
| Julian Green | London     | Nail Knite |        13 |
| Jozy Altidor | Moscow     | Paul Adam  |        13 |
+--------------+------------+------------+-----------+
6 rows in set (0.00 sec)

5. write a SQL query to locate those salespeople who do not live in the same city where their customers live and have received a commission of more than 12% from the company. Return Customer Name, customer city, Salesman, salesman city,
commission

mysql> select customer.cust_name as Customer,customer.city as Customer_City, salesman.name as Salesman,salesman.city as Salesman_City, salesman.commission_percentage as Commision from customer right join salesman on customer.salesman_id=salesman.salesman_id where salesman.commission_percentage>12 and customer.city<>salesman.city order by salesman.commission_percentage desc;
+--------------+---------------+------------+---------------+-----------+
| Customer     | Customer_City | Salesman   | Salesman_City | Commision |
+--------------+---------------+------------+---------------+-----------+
| Graham Zusi  | California    | Nail Knite | Paris         |        13 |
| Julian Green | London        | Nail Knite | Paris         |        13 |
| Jozy Altidor | Moscow        | Paul Adam  | Rome          |        13 |
+--------------+---------------+------------+---------------+-----------+

6. write a SQL query to find the details of an order. Return ord_no, ord_date, purch_amt,
 Customer Name, grade, Salesman, commission

mysql> select o.ord_no as Order_No, o.ord_date as Order_Date, o.purch_amt as Purchase_Amount, c.cust_name as Customer_Name,c.grade as Grade,s.name as Salesman,s.commission_percentage as Commission from ((orders o inner join customer c on c.customer_id=o.customer_id) inner join salesman s on c.salesman_id=s.salesman_id);
+----------+------------+-----------------+---------------+-------+------------+------------+
| Order_No | Order_Date | Purchase_Amount | Customer_Name | Grade | Salesman   | Commission |
+----------+------------+-----------------+---------------+-------+------------+------------+
|    70009 | 2012-09-10 |             270 | Brad Guzan    |   200 | Pit Alex   |         11 |
|    70002 | 2012-10-05 |              65 | Nick Rimando  |   100 | James Hoog |         15 |
|    70008 | 2012-09-10 |            5760 | Nick Rimando  |   100 | James Hoog |         15 |
|    70013 | 2012-04-25 |            3045 | Nick Rimando  |   100 | James Hoog |         15 |
|    70011 | 2012-08-17 |              75 | Jozy Altidor  |   200 | Paul Adam  |         13 |
|    70010 | 2012-10-10 |            1983 | Fabian Johns  |   300 | Mc Lyon    |         14 |
|    70001 | 2012-10-05 |             150 | Graham Zusi   |   200 | Nail Knite |         13 |
|    70007 | 2012-09-10 |             948 | Graham Zusi   |   200 | Nail Knite |         13 |
|    70005 | 2012-07-27 |            2400 | Brad Davis    |   200 | James Hoog |         15 |
|    70012 | 2012-06-27 |             250 | Julian Green  |   300 | Nail Knite |         13 |
|    70003 | 2012-10-10 |            2480 | Geoff Camero  |   100 | Lauson Hen |         12 |
|    70004 | 2012-08-17 |             110 | Geoff Camero  |   100 | Lauson Hen |         12 |
+----------+------------+-----------------+---------------+-------+------------+------------+


7. Write a SQL statement to join the tables salesman, customer and orders so that the
same column of each table appears once and only the relational rows are returned.

mysql> select c.customer_id as Customer_ID,c.cust_name as Customer, c.city as Customer_City,c.grade as Customer_Grade,s.salesman_id as Salesman_ID, s.name as Salesman, s.city as Salesman_City,s.commission_percentage as Commission, o.ord_no as Order_No,o.purch_amt as Purchase_Amount,o.ord_date as Order_Date from ((orders o inner join customer c on c.customer_id=o.customer_id) inner join salesman s on c.salesman_id=s.salesman_id);
+-------------+--------------+---------------+----------------+-------------+------------+---------------+------------+----------+-----------------+------------+
| Customer_ID | Customer     | Customer_City | Customer_Grade | Salesman_ID | Salesman   | Salesman_City | Commission | Order_No | Purchase_Amount | Order_Date |
+-------------+--------------+---------------+----------------+-------------+------------+---------------+------------+----------+-----------------+------------+
|        3001 | Brad Guzan   | London        |            200 |        5005 | Pit Alex   | London        |         11 |    70009 |             270 | 2012-09-10 |
|        3002 | Nick Rimando | New York      |            100 |        5001 | James Hoog | New York      |         15 |    70002 |              65 | 2012-10-05 |
|        3002 | Nick Rimando | New York      |            100 |        5001 | James Hoog | New York      |         15 |    70008 |            5760 | 2012-09-10 |
|        3002 | Nick Rimando | New York      |            100 |        5001 | James Hoog | New York      |         15 |    70013 |            3045 | 2012-04-25 |
|        3003 | Jozy Altidor | Moscow        |            200 |        5007 | Paul Adam  | Rome          |         13 |    70011 |              75 | 2012-08-17 |
|        3004 | Fabian Johns | Paris         |            300 |        5006 | Mc Lyon    | Paris         |         14 |    70010 |            1983 | 2012-10-10 |
|        3005 | Graham Zusi  | California    |            200 |        5002 | Nail Knite | Paris         |         13 |    70001 |             150 | 2012-10-05 |
|        3005 | Graham Zusi  | California    |            200 |        5002 | Nail Knite | Paris         |         13 |    70007 |             948 | 2012-09-10 |
|        3007 | Brad Davis   | New York      |            200 |        5001 | James Hoog | New York      |         15 |    70005 |            2400 | 2012-07-27 |
|        3008 | Julian Green | London        |            300 |        5002 | Nail Knite | Paris         |         13 |    70012 |             250 | 2012-06-27 |
|        3009 | Geoff Camero | Berlin        |            100 |        5003 | Lauson Hen | Paris         |         12 |    70003 |            2480 | 2012-10-10 |
|        3009 | Geoff Camero | Berlin        |            100 |        5003 | Lauson Hen | Paris         |         12 |    70004 |             110 | 2012-08-17 |
+-------------+--------------+---------------+----------------+-------------+------------+---------------+------------+----------+-----------------+------------+

8. write a SQL query to display the customer name, customer city, grade, salesman,
salesman city. The results should be sorted by ascending customer_id.

mysql> select c.cust_name as Customer_Name, c.city as Customer_City,c.grade as Customer_Grade, s.name as Salesman, s.city as Salesman_City from customer c inner join salesman s on c.salesman_id=s.salesman_id order by c.customer_id;
+---------------+---------------+----------------+------------+---------------+
| Customer_Name | Customer_City | Customer_Grade | Salesman   | Salesman_City |
+---------------+---------------+----------------+------------+---------------+
| Brad Guzan    | London        |            200 | Pit Alex   | London        |
| Nick Rimando  | New York      |            100 | James Hoog | New York      |
| Jozy Altidor  | Moscow        |            200 | Paul Adam  | Rome          |
| Fabian Johns  | Paris         |            300 | Mc Lyon    | Paris         |
| Graham Zusi   | California    |            200 | Nail Knite | Paris         |
| Brad Davis    | New York      |            200 | James Hoog | New York      |
| Julian Green  | London        |            300 | Nail Knite | Paris         |
| Geoff Camero  | Berlin        |            100 | Lauson Hen | Paris         |
+---------------+---------------+----------------+------------+---------------+


9. write a SQL query to find those customers with a grade less than 300. Return
cust_name, customer city, grade, Salesman, salesmancity. The result should be
ordered by ascending customer_id.

mysql> select c.customer_id as Customer_ID ,c.cust_name as Customer_Name, c.city as Customer_City,c.grade as Customer_Grade, s.name as Salesman, s.city as Salesman_City from customer c inner join salesman s on c.salesman_id=s.salesman_id where c.grade<300 order by c.customer_id;
+-------------+---------------+---------------+----------------+------------+---------------+
| Customer_ID | Customer_Name | Customer_City | Customer_Grade | Salesman   | Salesman_City |
+-------------+---------------+---------------+----------------+------------+---------------+
|        3001 | Brad Guzan    | London        |            200 | Pit Alex   | London        |
|        3002 | Nick Rimando  | New York      |            100 | James Hoog | New York      |
|        3003 | Jozy Altidor  | Moscow        |            200 | Paul Adam  | Rome          |
|        3005 | Graham Zusi   | California    |            200 | Nail Knite | Paris         |
|        3007 | Brad Davis    | New York      |            200 | James Hoog | New York      |
|        3009 | Geoff Camero  | Berlin        |            100 | Lauson Hen | Paris         |
+-------------+---------------+---------------+----------------+------------+---------------+
6 rows in set (0.00 sec)

10. Write a SQL statement to make a report with customer name, city, order number,
order date, and order amount in ascending order according to the order date to
determine whether any of the existing customers have placed an order or not

mysql> select c.cust_name as Customer_Name,c.city as Customer_City,o.ord_no as Order_No,o.ord_date as Order_Date,o.purch_amt as Order_Amount from customer c left join orders o on c.customer_id=o.customer_id order by o.ord_date;
+----------------+---------------+----------+------------+--------------+
| Customer_Name  | Customer_City | Order_No | Order_Date | Order_Amount |
+----------------+---------------+----------+------------+--------------+
| Joey Tribbiani | New York      |    70014 | 2012-01-15 |          529 |
| Nick Rimando   | New York      |    70013 | 2012-04-25 |         3045 |
| Julian Green   | London        |    70012 | 2012-06-27 |          250 |
| Brad Davis     | New York      |    70005 | 2012-07-27 |         2400 |
| Jozy Altidor   | Moscow        |    70011 | 2012-08-17 |           75 |
| Geoff Camero   | Berlin        |    70004 | 2012-08-17 |          110 |
| Brad Guzan     | London        |    70009 | 2012-09-10 |          270 |
| Nick Rimando   | New York      |    70008 | 2012-09-10 |         5760 |
| Graham Zusi    | California    |    70007 | 2012-09-10 |          948 |
| Nick Rimando   | New York      |    70002 | 2012-10-05 |           65 |
| Graham Zusi    | California    |    70001 | 2012-10-05 |          150 |
| Fabian Johns   | Paris         |    70010 | 2012-10-10 |         1983 |
| Geoff Camero   | Berlin        |    70003 | 2012-10-10 |         2480 |
+----------------+---------------+----------+------------+--------------+
13 rows in set (0.00 sec)


11. Write a SQL statement to generate a report with customer name, city, order number,
order date, order amount, salesperson name, and commission to determine if any of
the existing customers have not placed orders or if they have placed orders through
their salesman or by themselves

mysql> select o.ord_no,o.ord_date,o.purch_amt,c.cust_name,c.city,s.name,s.commission_percentage from customer as c left join salesman as s on s.salesman_id = c.salesman_id left join orders as o on c.customer_id = o.customer_id;
+--------+------------+-----------+----------------+------------+------------+-----------------------+
| ord_no | ord_date   | purch_amt | cust_name      | city       | name       | commission_percentage |
+--------+------------+-----------+----------------+------------+------------+-----------------------+
|  70009 | 2012-09-10 |       270 | Brad Guzan     | London     | Pit Alex   |                    11 |
|  70002 | 2012-10-05 |        65 | Nick Rimando   | New York   | James Hoog |                    15 |
|  70008 | 2012-09-10 |      5760 | Nick Rimando   | New York   | James Hoog |                    15 |
|  70013 | 2012-04-25 |      3045 | Nick Rimando   | New York   | James Hoog |                    15 |
|  70011 | 2012-08-17 |        75 | Jozy Altidor   | Moscow     | Paul Adam  |                    13 |
|  70010 | 2012-10-10 |      1983 | Fabian Johns   | Paris      | Mc Lyon    |                    14 |
|  70001 | 2012-10-05 |       150 | Graham Zusi    | California | Nail Knite |                    13 |
|  70007 | 2012-09-10 |       948 | Graham Zusi    | California | Nail Knite |                    13 |
|  70005 | 2012-07-27 |      2400 | Brad Davis     | New York   | James Hoog |                    15 |
|  70012 | 2012-06-27 |       250 | Julian Green   | London     | Nail Knite |                    13 |
|  70003 | 2012-10-10 |      2480 | Geoff Camero   | Berlin     | Lauson Hen |                    12 |
|  70004 | 2012-08-17 |       110 | Geoff Camero   | Berlin     | Lauson Hen |                    12 |
|  70014 | 2012-01-15 |       529 | Joey Tribbiani | New York   | NULL       |                  NULL |
+--------+------------+-----------+----------------+------------+------------+-----------------------+

12. Write a SQL statement to generate a list in ascending order of salespersons who
work either for one or more customers or have not yet joined any of the customers

mysql> select s.name, count(c.salesman_id) from customer c right join salesman s on c.salesman_id=s.salesman_id group by s.salesman_id order by count(c.salesman_id);
+---------------+----------------------+
| name          | count(c.salesman_id) |
+---------------+----------------------+
| Chandler Bing |                    0 |
| Lauson Hen    |                    1 |
| Pit Alex      |                    1 |
| Mc Lyon       |                    1 |
| Paul Adam     |                    1 |
| James Hoog    |                    2 |
| Nail Knite    |                    2 |
+---------------+----------------------+
7 rows in set (0.00 sec)

13. write a SQL query to list all salespersons along with customer name, city, grade,
order number, date, and amount.

mysql> select s.salesman_id,s.name,c.cust_name,c.city,c.grade,o.ord_no,o.ord_date,o.purch_amt from ((salesman s left join customer c on c.salesman_id = s.salesman_id) left join orders o on c.customer_id = o.customer_id);
+-------------+---------------+--------------+------------+-------+--------+------------+-----------+
| salesman_id | name          | cust_name    | city       | grade | ord_no | ord_date   | purch_amt |
+-------------+---------------+--------------+------------+-------+--------+------------+-----------+
|        5001 | James Hoog    | Nick Rimando | New York   |   100 |  70002 | 2012-10-05 |        65 |
|        5001 | James Hoog    | Nick Rimando | New York   |   100 |  70008 | 2012-09-10 |      5760 |
|        5001 | James Hoog    | Nick Rimando | New York   |   100 |  70013 | 2012-04-25 |      3045 |
|        5001 | James Hoog    | Brad Davis   | New York   |   200 |  70005 | 2012-07-27 |      2400 |
|        5002 | Nail Knite    | Graham Zusi  | California |   200 |  70001 | 2012-10-05 |       150 |
|        5002 | Nail Knite    | Graham Zusi  | California |   200 |  70007 | 2012-09-10 |       948 |
|        5002 | Nail Knite    | Julian Green | London     |   300 |  70012 | 2012-06-27 |       250 |
|        5003 | Lauson Hen    | Geoff Camero | Berlin     |   100 |  70003 | 2012-10-10 |      2480 |
|        5003 | Lauson Hen    | Geoff Camero | Berlin     |   100 |  70004 | 2012-08-17 |       110 |
|        5005 | Pit Alex      | Brad Guzan   | London     |   200 |  70009 | 2012-09-10 |       270 |
|        5006 | Mc Lyon       | Fabian Johns | Paris      |   300 |  70010 | 2012-10-10 |      1983 |
|        5007 | Paul Adam     | Jozy Altidor | Moscow     |   200 |  70011 | 2012-08-17 |        75 |
|        5008 | Chandler Bing | NULL         | NULL       |  NULL |   NULL | NULL       |      NULL |
+-------------+---------------+--------------+------------+-------+--------+------------+-----------+
13 rows in set (0.00 sec)

14. Write a SQL statement to make a list for the salesmen who either work for one or
more customers or yet to join any of the customers. The customer may have placed,
either one or more orders on or above order amount 2000 and must have a grade, or
he may not have placed any order to the associated supplier.

mysql> select s.name from salesman s left join customer c on s.salesman_id=c.salesman_id inner join orders o on c.customer_id = o.customer_id where (o.purch_amt > 2000 and c.grade IS NOT NULL) OR o.ord_no IS NULL;
+------------+
| name       |
+------------+
| Lauson Hen |
| James Hoog |
| James Hoog |
| James Hoog |
+------------+

15. Write a SQL statement to generate a list of all the salesmen who either work for one
or more customers or have yet to join any of them. The customer may have placed
one or more orders at or above order amount 2000, and must have a grade, or he
may not have placed any orders to the associated supplier.

mysql> select s.name from salesman s left join customer c on s.salesman_id=c.salesman_id inner join orders o on c.customer_id = o.customer_id where (o.purch_amt > 2000 and c.grade IS NOT NULL) OR o.ord_no IS NULL;
+------------+
| name       |
+------------+
| Lauson Hen |
| James Hoog |
| James Hoog |
| James Hoog |
+------------+


16. Write a SQL statement to generate a report with the customer name, city, order no.
order date, purchase amount for only those customers on the list who must have a
grade and placed one or more orders or which order(s) have been placed by the
customer who neither is on the list nor has a grade.	

mysql> select cust_name, customer.city as customerCity, ord_no, ord_date, purch_amt from customer INNER JOIN orders on customer.customer_id=orders.customer_id where (grade IS NOT NULL and customer.customer_id IN(select customer_id from orders)) UNION SELECT cust_name, customer.city as customerCity, ord_no, ord_date, purch_amt from customer LEFT JOIN orders on customer.customer_id=orders.customer_id where (grade IS NULL and customer.customer_id NOT IN (select customer_id from orders));
+----------------+--------------+--------+------------+-----------+
| cust_name      | customerCity | ord_no | ord_date   | purch_amt |
+----------------+--------------+--------+------------+-----------+
| Brad Guzan     | London       |  70009 | 2012-09-10 |       270 |
| Nick Rimando   | New York     |  70002 | 2012-10-05 |        65 |
| Nick Rimando   | New York     |  70008 | 2012-09-10 |      5760 |
| Nick Rimando   | New York     |  70013 | 2012-04-25 |      3045 |
| Jozy Altidor   | Moscow       |  70011 | 2012-08-17 |        75 |
| Fabian Johns   | Paris        |  70010 | 2012-10-10 |      1983 |
| Graham Zusi    | California   |  70001 | 2012-10-05 |       150 |
| Graham Zusi    | California   |  70007 | 2012-09-10 |       948 |
| Brad Davis     | New York     |  70005 | 2012-07-27 |      2400 |
| Julian Green   | London       |  70012 | 2012-06-27 |       250 |
| Geoff Camero   | Berlin       |  70003 | 2012-10-10 |      2480 |
| Geoff Camero   | Berlin       |  70004 | 2012-08-17 |       110 |
| Joey Tribbiani | New York     |  70014 | 2012-01-15 |       529 |
| Sheldon        | Srilanka     |   NULL | NULL       |      NULL |
+----------------+--------------+--------+------------+-----------+


17. Write a SQL query to combine each row of the salesman table with each row of the
customer table

mysql> select * from salesman s CROSS JOIN customer c where s.city=c.city;
+-------------+---------------+----------+-----------------------+-------------+----------------+----------+-------+-------------+
| salesman_id | name          | city     | commission_percentage | customer_id | cust_name      | city     | grade | salesman_id |
+-------------+---------------+----------+-----------------------+-------------+----------------+----------+-------+-------------+
|        5005 | Pit Alex      | London   |                    11 |        3001 | Brad Guzan     | London   |   200 |        5005 |
|        5008 | Chandler Bing | New York |                    10 |        3002 | Nick Rimando   | New York |   100 |        5001 |
|        5001 | James Hoog    | New York |                    15 |        3002 | Nick Rimando   | New York |   100 |        5001 |
|        5006 | Mc Lyon       | Paris    |                    14 |        3004 | Fabian Johns   | Paris    |   300 |        5006 |
|        5003 | Lauson Hen    | Paris    |                    12 |        3004 | Fabian Johns   | Paris    |   300 |        5006 |
|        5002 | Nail Knite    | Paris    |                    13 |        3004 | Fabian Johns   | Paris    |   300 |        5006 |
|        5008 | Chandler Bing | New York |                    10 |        3007 | Brad Davis     | New York |   200 |        5001 |
|        5001 | James Hoog    | New York |                    15 |        3007 | Brad Davis     | New York |   200 |        5001 |
|        5005 | Pit Alex      | London   |                    11 |        3008 | Julian Green   | London   |   300 |        5002 |
|        5008 | Chandler Bing | New York |                    10 |        3010 | Joey Tribbiani | New York |   200 |        NULL |
|        5001 | James Hoog    | New York |                    15 |        3010 | Joey Tribbiani | New York |   200 |        NULL |
+-------------+---------------+----------+-----------------------+-------------+----------------+----------+-------+-------------+
11 rows in set (0.00 sec)


18. Write a SQL statement to create a Cartesian product between salesperson and
customer, i.e. each salesperson will appear for all customers and vice versa for that
salesperson who belongs to that city

mysql> select * from salesman s CROSS JOIN customer c where s.city=c.city;
+-------------+---------------+----------+-----------------------+-------------+----------------+----------+-------+-------------+
| salesman_id | name          | city     | commission_percentage | customer_id | cust_name      | city     | grade | salesman_id |
+-------------+---------------+----------+-----------------------+-------------+----------------+----------+-------+-------------+
|        5005 | Pit Alex      | London   |                    11 |        3001 | Brad Guzan     | London   |   200 |        5005 |
|        5008 | Chandler Bing | New York |                    10 |        3002 | Nick Rimando   | New York |   100 |        5001 |
|        5001 | James Hoog    | New York |                    15 |        3002 | Nick Rimando   | New York |   100 |        5001 |
|        5006 | Mc Lyon       | Paris    |                    14 |        3004 | Fabian Johns   | Paris    |   300 |        5006 |
|        5003 | Lauson Hen    | Paris    |                    12 |        3004 | Fabian Johns   | Paris    |   300 |        5006 |
|        5002 | Nail Knite    | Paris    |                    13 |        3004 | Fabian Johns   | Paris    |   300 |        5006 |
|        5008 | Chandler Bing | New York |                    10 |        3007 | Brad Davis     | New York |   200 |        5001 |
|        5001 | James Hoog    | New York |                    15 |        3007 | Brad Davis     | New York |   200 |        5001 |
|        5005 | Pit Alex      | London   |                    11 |        3008 | Julian Green   | London   |   300 |        5002 |
|        5008 | Chandler Bing | New York |                    10 |        3010 | Joey Tribbiani | New York |   200 |        NULL |
|        5001 | James Hoog    | New York |                    15 |        3010 | Joey Tribbiani | New York |   200 |        NULL |
+-------------+---------------+----------+-----------------------+-------------+----------------+----------+-------+-------------+
11 rows in set (0.00 sec)

19. Write a SQL statement to create a Cartesian product between salesperson and
customer, i.e. each salesperson will appear for every customer and vice versa for
those salesmen who belong to a city and customers who require a grade

mysql> select * from salesman s CROSS JOIN customer c where s.city=c.city AND c.grade IS NOT NULL;
+-------------+---------------+----------+-----------------------+-------------+----------------+----------+-------+-------------+
| salesman_id | name          | city     | commission_percentage | customer_id | cust_name      | city     | grade | salesman_id |
+-------------+---------------+----------+-----------------------+-------------+----------------+----------+-------+-------------+
|        5005 | Pit Alex      | London   |                    11 |        3001 | Brad Guzan     | London   |   200 |        5005 |
|        5008 | Chandler Bing | New York |                    10 |        3002 | Nick Rimando   | New York |   100 |        5001 |
|        5001 | James Hoog    | New York |                    15 |        3002 | Nick Rimando   | New York |   100 |        5001 |
|        5006 | Mc Lyon       | Paris    |                    14 |        3004 | Fabian Johns   | Paris    |   300 |        5006 |
|        5003 | Lauson Hen    | Paris    |                    12 |        3004 | Fabian Johns   | Paris    |   300 |        5006 |
|        5002 | Nail Knite    | Paris    |                    13 |        3004 | Fabian Johns   | Paris    |   300 |        5006 |
|        5008 | Chandler Bing | New York |                    10 |        3007 | Brad Davis     | New York |   200 |        5001 |
|        5001 | James Hoog    | New York |                    15 |        3007 | Brad Davis     | New York |   200 |        5001 |
|        5005 | Pit Alex      | London   |                    11 |        3008 | Julian Green   | London   |   300 |        5002 |
|        5008 | Chandler Bing | New York |                    10 |        3010 | Joey Tribbiani | New York |   200 |        NULL |
|        5001 | James Hoog    | New York |                    15 |        3010 | Joey Tribbiani | New York |   200 |        NULL |
+-------------+---------------+----------+-----------------------+-------------+----------------+----------+-------+-------------+
11 rows in set (0.00 sec)


20. Write a SQL statement to make a Cartesian product between salesman and
customer i.e. each salesman will appear for all customers and vice versa for those
salesmen who must belong to a city which is not the same as his customer and the
customers should have their own grade


mysql> select * from salesman s CROSS JOIN customer c where s.city<>c.city AND c.grade IS NOT NULL;
+-------------+---------------+----------+-----------------------+-------------+----------------+------------+-------+-------------+
| salesman_id | name          | city     | commission_percentage | customer_id | cust_name      | city       | grade | salesman_id |
+-------------+---------------+----------+-----------------------+-------------+----------------+------------+-------+-------------+
|        5008 | Chandler Bing | New York |                    10 |        3001 | Brad Guzan     | London     |   200 |        5005 |
|        5007 | Paul Adam     | Rome     |                    13 |        3001 | Brad Guzan     | London     |   200 |        5005 |
|        5006 | Mc Lyon       | Paris    |                    14 |        3001 | Brad Guzan     | London     |   200 |        5005 |
|        5003 | Lauson Hen    | Paris    |                    12 |        3001 | Brad Guzan     | London     |   200 |        5005 |
|        5002 | Nail Knite    | Paris    |                    13 |        3001 | Brad Guzan     | London     |   200 |        5005 |
|        5001 | James Hoog    | New York |                    15 |        3001 | Brad Guzan     | London     |   200 |        5005 |
|        5007 | Paul Adam     | Rome     |                    13 |        3002 | Nick Rimando   | New York   |   100 |        5001 |
|        5006 | Mc Lyon       | Paris    |                    14 |        3002 | Nick Rimando   | New York   |   100 |        5001 |
|        5005 | Pit Alex      | London   |                    11 |        3002 | Nick Rimando   | New York   |   100 |        5001 |
|        5003 | Lauson Hen    | Paris    |                    12 |        3002 | Nick Rimando   | New York   |   100 |        5001 |
|        5002 | Nail Knite    | Paris    |                    13 |        3002 | Nick Rimando   | New York   |   100 |        5001 |
|        5008 | Chandler Bing | New York |                    10 |        3003 | Jozy Altidor   | Moscow     |   200 |        5007 |
|        5007 | Paul Adam     | Rome     |                    13 |        3003 | Jozy Altidor   | Moscow     |   200 |        5007 |
|        5006 | Mc Lyon       | Paris    |                    14 |        3003 | Jozy Altidor   | Moscow     |   200 |        5007 |
|        5005 | Pit Alex      | London   |                    11 |        3003 | Jozy Altidor   | Moscow     |   200 |        5007 |
|        5003 | Lauson Hen    | Paris    |                    12 |        3003 | Jozy Altidor   | Moscow     |   200 |        5007 |
|        5002 | Nail Knite    | Paris    |                    13 |        3003 | Jozy Altidor   | Moscow     |   200 |        5007 |
|        5001 | James Hoog    | New York |                    15 |        3003 | Jozy Altidor   | Moscow     |   200 |        5007 |
|        5008 | Chandler Bing | New York |                    10 |        3004 | Fabian Johns   | Paris      |   300 |        5006 |
|        5007 | Paul Adam     | Rome     |                    13 |        3004 | Fabian Johns   | Paris      |   300 |        5006 |
|        5005 | Pit Alex      | London   |                    11 |        3004 | Fabian Johns   | Paris      |   300 |        5006 |
|        5001 | James Hoog    | New York |                    15 |        3004 | Fabian Johns   | Paris      |   300 |        5006 |
|        5008 | Chandler Bing | New York |                    10 |        3005 | Graham Zusi    | California |   200 |        5002 |
|        5007 | Paul Adam     | Rome     |                    13 |        3005 | Graham Zusi    | California |   200 |        5002 |
|        5006 | Mc Lyon       | Paris    |                    14 |        3005 | Graham Zusi    | California |   200 |        5002 |
|        5005 | Pit Alex      | London   |                    11 |        3005 | Graham Zusi    | California |   200 |        5002 |
|        5003 | Lauson Hen    | Paris    |                    12 |        3005 | Graham Zusi    | California |   200 |        5002 |
|        5002 | Nail Knite    | Paris    |                    13 |        3005 | Graham Zusi    | California |   200 |        5002 |
|        5001 | James Hoog    | New York |                    15 |        3005 | Graham Zusi    | California |   200 |        5002 |
|        5007 | Paul Adam     | Rome     |                    13 |        3007 | Brad Davis     | New York   |   200 |        5001 |
|        5006 | Mc Lyon       | Paris    |                    14 |        3007 | Brad Davis     | New York   |   200 |        5001 |
|        5005 | Pit Alex      | London   |                    11 |        3007 | Brad Davis     | New York   |   200 |        5001 |
|        5003 | Lauson Hen    | Paris    |                    12 |        3007 | Brad Davis     | New York   |   200 |        5001 |
|        5002 | Nail Knite    | Paris    |                    13 |        3007 | Brad Davis     | New York   |   200 |        5001 |
|        5008 | Chandler Bing | New York |                    10 |        3008 | Julian Green   | London     |   300 |        5002 |
|        5007 | Paul Adam     | Rome     |                    13 |        3008 | Julian Green   | London     |   300 |        5002 |
|        5006 | Mc Lyon       | Paris    |                    14 |        3008 | Julian Green   | London     |   300 |        5002 |
|        5003 | Lauson Hen    | Paris    |                    12 |        3008 | Julian Green   | London     |   300 |        5002 |
|        5002 | Nail Knite    | Paris    |                    13 |        3008 | Julian Green   | London     |   300 |        5002 |
|        5001 | James Hoog    | New York |                    15 |        3008 | Julian Green   | London     |   300 |        5002 |
|        5008 | Chandler Bing | New York |                    10 |        3009 | Geoff Camero   | Berlin     |   100 |        5003 |
|        5007 | Paul Adam     | Rome     |                    13 |        3009 | Geoff Camero   | Berlin     |   100 |        5003 |
|        5006 | Mc Lyon       | Paris    |                    14 |        3009 | Geoff Camero   | Berlin     |   100 |        5003 |
|        5005 | Pit Alex      | London   |                    11 |        3009 | Geoff Camero   | Berlin     |   100 |        5003 |
|        5003 | Lauson Hen    | Paris    |                    12 |        3009 | Geoff Camero   | Berlin     |   100 |        5003 |
|        5002 | Nail Knite    | Paris    |                    13 |        3009 | Geoff Camero   | Berlin     |   100 |        5003 |
|        5001 | James Hoog    | New York |                    15 |        3009 | Geoff Camero   | Berlin     |   100 |        5003 |
|        5007 | Paul Adam     | Rome     |                    13 |        3010 | Joey Tribbiani | New York   |   200 |        NULL |
|        5006 | Mc Lyon       | Paris    |                    14 |        3010 | Joey Tribbiani | New York   |   200 |        NULL |
|        5005 | Pit Alex      | London   |                    11 |        3010 | Joey Tribbiani | New York   |   200 |        NULL |
|        5003 | Lauson Hen    | Paris    |                    12 |        3010 | Joey Tribbiani | New York   |   200 |        NULL |
|        5002 | Nail Knite    | Paris    |                    13 |        3010 | Joey Tribbiani | New York   |   200 |        NULL |
+-------------+---------------+----------+-----------------------+-------------+----------------+------------+-------+-------------+
52 rows in set (0.00 sec)



